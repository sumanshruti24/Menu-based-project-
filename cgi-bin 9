#!/usr/bin/env python3



import cgi

import json

import boto3



print("Content-Type: application/json")

print()



def get_client():

    return boto3.client('ec2')



def launch_instance(client):

    try:

        response = client.run_instances(

            ImageId='ami-0abcdef1234567890',  # Update with your AMI ID

            InstanceType='t2.micro',

            MinCount=1,

            MaxCount=1

        )

        instance_id = response['Instances'][0]['InstanceId']

        return {'message': f'Instance {instance_id} launched successfully.'}

    except Exception as e:

        return {'error': str(e)}



def stop_instance(client, instance_id):

    try:

        client.stop_instances(InstanceIds=[instance_id])

        return {'message': f'Instance {instance_id} stopped successfully.'}

    except Exception as e:

        return {'error': str(e)}



def start_instance(client, instance_id):

    try:

        client.start_instances(InstanceIds=[instance_id])

        return {'message': f'Instance {instance_id} started successfully.'}

    except Exception as e:

        return {'error': str(e)}



def terminate_instance(client, instance_id):

    try:

        client.terminate_instances(InstanceIds=[instance_id])

        return {'message': f'Instance {instance_id} terminated successfully.'}

    except Exception as e:

        return {'error': str(e)}



def main():

    form = cgi.FieldStorage()

    action = form.getvalue('action')

    instance_id = form.getvalue('instance_id')



    client = get_client()

    if action == 'launch':

        result = launch_instance(client)

    elif action == 'stop' and instance_id:

        result = stop_instance(client, instance_id)

    elif action == 'start' and instance_id:

        result = start_instance(client, instance_id)

    elif action == 'terminate' and instance_id:

        result = terminate_instance(client, instance_id)

    else:

        result = {'error': 'Invalid action or missing instance ID'}



    print(json.dumps(result))



if __name__ == "__main__":

    main()

